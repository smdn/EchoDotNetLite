// Smdn.Net.EchonetLite.RouteB.Primitives.dll (Smdn.Net.EchonetLite.RouteB.Primitives-2.0.0-preview1)
//   Name: Smdn.Net.EchonetLite.RouteB.Primitives
//   AssemblyVersion: 2.0.0.0
//   InformationalVersion: 2.0.0-preview1+60a8ce3520b765b1bcab669a662cfb615f41a1f5
//   TargetFramework: .NETCoreApp,Version=v8.0
//   Configuration: Release
//   Referenced assemblies:
//     Microsoft.Extensions.DependencyInjection.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
//     Smdn.Net.EchonetLite.Primitives, Version=2.0.0.0, Culture=neutral
//     System.Memory, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//     System.Net.Primitives, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//     System.Runtime, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
#nullable enable annotations

using System;
using System.Buffers;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Smdn.Net.EchonetLite.RouteB.Credentials;
using Smdn.Net.EchonetLite.RouteB.Transport;
using Smdn.Net.EchonetLite.Transport;

namespace Smdn.Net.EchonetLite.RouteB.Credentials {
  public interface IRouteBCredential : IDisposable {
    void WriteIdTo(IBufferWriter<byte> buffer);
    void WritePasswordTo(IBufferWriter<byte> buffer);
  }

  public interface IRouteBCredentialIdentity {
  }

  public interface IRouteBCredentialProvider {
    IRouteBCredential GetCredential(IRouteBCredentialIdentity identity);
  }

  public static class RouteBCredentials {
    public const int AuthenticationIdLength = 32;
    public const int PasswordLength = 12;
  }
}

namespace Smdn.Net.EchonetLite.RouteB.Transport {
  public interface IRouteBEchonetLiteHandlerBuilder {
    IServiceCollection Services { get; }
  }

  public interface IRouteBEchonetLiteHandlerFactory {
    ValueTask<RouteBEchonetLiteHandler> CreateAsync(CancellationToken cancellationToken);
  }

  public abstract class RouteBEchonetLiteHandler : EchonetLiteHandler {
    protected RouteBEchonetLiteHandler() {}

    public abstract IPAddress? PeerAddress { get; }

    public ValueTask ConnectAsync(IRouteBCredential credential, CancellationToken cancellationToken = default) {}
    protected abstract ValueTask ConnectAsyncCore(IRouteBCredential credential, CancellationToken cancellationToken);
    public ValueTask DisconnectAsync(CancellationToken cancellationToken = default) {}
    protected abstract ValueTask DisconnectAsyncCore(CancellationToken cancellationToken);
  }
}
// API list generated by Smdn.Reflection.ReverseGenerating.ListApi.MSBuild.Tasks v1.4.1.0.
// Smdn.Reflection.ReverseGenerating.ListApi.Core v1.3.1.0 (https://github.com/smdn/Smdn.Reflection.ReverseGenerating)
