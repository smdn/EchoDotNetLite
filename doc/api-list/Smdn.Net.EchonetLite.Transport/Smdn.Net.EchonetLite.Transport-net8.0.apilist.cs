// Smdn.Net.EchonetLite.Transport.dll (Smdn.Net.EchonetLite.Transport-2.0.0-preview1)
//   Name: Smdn.Net.EchonetLite.Transport
//   AssemblyVersion: 2.0.0.0
//   InformationalVersion: 2.0.0-preview1+b0acf65730d955fb3ebad4d61dcf4d5e48e5d1b4
//   TargetFramework: .NETCoreApp,Version=v8.0
//   Configuration: Release
//   Referenced assemblies:
//     System.ComponentModel.Primitives, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//     System.Memory, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//     System.Net.Primitives, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//     System.Runtime, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//     System.Threading, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
#nullable enable annotations

using System;
using System.Buffers;
using System.ComponentModel;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Smdn.Net.EchonetLite;

namespace Smdn.Net.EchonetLite {
  public interface IEchonetLiteHandler {
    event EventHandler<(IPAddress Address, ReadOnlyMemory<byte> Data)> Received;

    ValueTask SendAsync(IPAddress? address, ReadOnlyMemory<byte> data, CancellationToken cancellationToken);
  }
}

namespace Smdn.Net.EchonetLite.Transport {
  public abstract class EchonetLiteHandler :
    IAsyncDisposable,
    IDisposable,
    IEchonetLiteHandler
  {
    public event EventHandler<(IPAddress, ReadOnlyMemory<byte>)> Received { add; remove; }

    protected EchonetLiteHandler() {}

    protected bool IsDisposed { get; }
    protected bool IsReceiving { get; }
    public abstract IPAddress? LocalAddress { get; }
    public abstract ISynchronizeInvoke? SynchronizingObject { get; set; }

    protected virtual void Dispose(bool disposing) {}
    public void Dispose() {}
    public async ValueTask DisposeAsync() {}
    protected virtual async ValueTask DisposeAsyncCore() {}
    protected abstract ValueTask<IPAddress> ReceiveAsyncCore(IBufferWriter<byte> buffer, CancellationToken cancellationToken);
    public async ValueTask SendAsync(IPAddress? address, ReadOnlyMemory<byte> data, CancellationToken cancellationToken) {}
    protected abstract ValueTask SendAsyncCore(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken);
    protected abstract ValueTask SendToAsyncCore(IPAddress remoteAddress, ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken);
    protected void StartReceiving() {}
    protected async ValueTask StopReceivingAsync() {}
    protected virtual void ThrowIfDisposed() {}
    protected void ThrowIfReceiving() {}
  }
}
// API list generated by Smdn.Reflection.ReverseGenerating.ListApi.MSBuild.Tasks v1.4.1.0.
// Smdn.Reflection.ReverseGenerating.ListApi.Core v1.3.1.0 (https://github.com/smdn/Smdn.Reflection.ReverseGenerating)
